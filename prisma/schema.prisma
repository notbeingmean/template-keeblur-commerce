// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String
  email         String     @unique
  emailVerified Boolean    @default(false)
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Cart          Cart[]
  Order         Order[]
  Wishlist      Wishlist[]
  Address       Address[]
  role          String     @default("user")

  banned     Boolean?
  banReason  String?
  banExpires DateTime?
  sessions   Session[]
  accounts   Account[]

  @@map("user")
}

model Address {
  address_id  String @id @default(cuid())
  user        User   @relation(fields: [user_id], references: [id])
  user_id     String
  name        String
  type        String
  address     String
  province    String
  phoneNumber String
  postalCode  String
  priority    Int

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Shipping  Shipping[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])

  token          String
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id           String    @id @default(cuid())
  userId       String
  accountId    String
  providerId   String
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  password     String?
  User         User      @relation(fields: [userId], references: [id])
  idToken      String?

  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id String @id @default(cuid())

  value      String
  expiresAt  DateTime
  identifier String

  createdAt DateTime?
  updatedAt DateTime?

  @@map("verification")
}

model Category {
  category_id String  @id @default(cuid())
  name        String
  description String?
  slug        String

  products Product[]
}

model Product {
  product_id  String   @id @default(cuid())
  name        String
  description String?
  price       Float
  stock       Int
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  discount    Float?

  category Category[]

  images Product_Image[]

  cartItems     Cart_Item[]
  wishlist      Wishlist[]
  orderDetail   OrderDetail[]
  productDetail Product_Detail?
}

model Product_Image {
  image_id String  @id @default(cuid())
  imageUrl String
  altText  String?
  position Int?

  product    Product  @relation(fields: [product_id], references: [product_id])
  product_id String
  createdAt  DateTime @default(now())
}

model Product_Detail {
  product_detail_id String   @id @default(cuid())
  product_id        String   @unique
  name              String
  value             String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  product           Product  @relation(fields: [product_id], references: [product_id])
}

model Order {
  order_id    String   @id @default(cuid())
  totalAmount Float
  status      String   @default("pending")
  orderDate   DateTime @default(now())
  user_id     String
  user        User     @relation(fields: [user_id], references: [id])

  shipping    Shipping?
  orderDetail OrderDetail[] // Relation to OrderDetail
}

model OrderDetail {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [order_id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [product_id])
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  cart_id   String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user_id   String      @unique
  user      User        @relation(fields: [user_id], references: [id])
  cartItems Cart_Item[]
}

model Cart_Item {
  cart_item_id String @id @default(cuid())
  quantity     Int

  cart       Cart    @relation(fields: [cart_id], references: [cart_id])
  cart_id    String
  product    Product @relation(fields: [product_id], references: [product_id])
  product_id String
}

model Shipping {
  shipping_id String  @id @default(cuid())
  address     Address @relation(fields: [address_id], references: [address_id])
  address_id  String

  shippingDate   DateTime?
  trackingNumber String?
  shippingStatus String    @default("pending")

  order_id String @unique
  order    Order  @relation(fields: [order_id], references: [order_id])
}

model Coupon {
  coupon_id String   @id @default(cuid())
  code      String
  discount  Float
  expiresAt DateTime
  isActive  Boolean
}

model Wishlist {
  wishlist_id String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user_id  String    @unique
  user     User      @relation(fields: [user_id], references: [id])
  products Product[]
}
